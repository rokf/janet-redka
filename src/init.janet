(import resp)

(defmacro make-command [name docs]
  ~(def ,name ,docs (fn [client & args]
                      (:send client (map string [',name ;args])))))

(make-command hdel "Deletes one or more fields and their values.")
(make-command hexists "Determines whether a field exists.")
(make-command hget "Returns the value of a field.")
(make-command hgetall "Returns all fields and values.")
(make-command hincrby "Increments the integer value of a field.")
(make-command hincrbyfloat "Increments the float value of a field.")
(make-command hkeys "Returns all fields.")
(make-command hlen "Returns the number of fields.")
(make-command hmget "Returns the values of multiple fields.")
(make-command hmset "Sets the values of multiple fields.")
(make-command hscan "Iterates over fields and values.")
(make-command hset "Sets the values of one or more fields.")
(make-command hsetnx "Sets the value of a field when it doesn't exist.")
(make-command hvals "Returns all values.")
(make-command dbsize "Returns the total number of keys.")
(make-command del "Deletes one or more keys.")
(make-command exists "Determines whether one or more keys exist.")
(make-command expire "Sets the expiration time of a key (in seconds).")
(make-command expireat "Sets the expiration time of a key to a Unix timestamp.")
(make-command flushall "Deletes all keys from the database.")
(make-command flushdb "Deletes all keys from the database.")
(make-command keys "Returns all key names that match a pattern.")
(make-command persist "Removes the expiration time of a key.")
(make-command pexpire "Sets the expiration time of a key in ms.")
(make-command pexpireat "Sets the expiration time of a key to a Unix ms timestamp.")
(make-command randomkey "Returns a random key name from the database.")
(make-command rename "Renames a key and overwrites the destination.")
(make-command renamenx "Renames a key only when the target key name doesn't exist.")
(make-command scan "Iterates over the key names in the database.")
(make-command ttl "Returns the expiration time in seconds of a key.")
(make-command type "Returns the type of value stored at a key.")
(make-command lindex "Returns an element by its index.")
(make-command linsert "Inserts an element before or after another element.")
(make-command llen "Returns the length of a list.")
(make-command lpop "Returns the first element after removing it.")
(make-command lpush "Prepends an element to a list.")
(make-command lrange "Returns a range of elements.")
(make-command lrem "Removes elements from a list.")
(make-command lset "Sets the value of an element by its index.")
(make-command ltrim "Removes elements from both ends a list.")
(make-command rpop "Returns the last element after removing it.")
(make-command rpoplpush "Removes the last element and pushes it to another list.")
(make-command rpush "Appends an element to a list.")
(make-command echo "Returns the given string.")
(make-command lolwut "Provides an answer to a yes/no question.")
(make-command ping "Returns the server's liveliness response.")
(make-command select "Changes the selected database (no-op).")
(make-command sadd "Adds one or more members to a set.")
(make-command scard "Returns the number of members in a set.")
(make-command sdiff "Returns the difference of multiple sets.")
(make-command sdiffstore "Stores the difference of multiple sets.")
(make-command sinter "Returns the intersection of multiple sets.")
(make-command sinterstore "Stores the intersection of multiple sets.")
(make-command sismember "Determines whether a member belongs to a set.")
(make-command smembers "Returns all members of a set.")
(make-command smove "Moves a member from one set to another.")
(make-command spop "Returns a random member after removing it.")
(make-command srandmember "Returns a random member from a set.")
(make-command srem "Removes one or more members from a set.")
(make-command sscan "Iterates over members of a set.")
(make-command sunion "Returns the union of multiple sets.")
(make-command sunionstore "Stores the union of multiple sets.")
(make-command zadd "Adds or updates one or more members of a set.")
(make-command zcard "Returns the number of members in a set.")
(make-command zcount "Returns the number of members of a set within a range of scores.")
(make-command zincrby "Increments the score of a member in a set.")
(make-command zinter "Returns the intersection of multiple sets.")
(make-command zinterstore "Stores the intersection of multiple sets in a key.")
(make-command zrange "Returns members of a set within a range of indexes.")
(make-command zrangebyscore "Returns members of a set within a range of scores.")
(make-command zrank "Returns the index of a member in a set ordered by ascending scores.")
(make-command zrem "Removes one or more members from a set.")
(make-command zremrangebyrank "Removes members of a set within a range of indexes.")
(make-command zremrangebyscore "Removes members of a set within a range of scores.")
(make-command zrevrange "Returns members of a set within a range of indexes in reverse order.")
(make-command zrevrangebyscore "Returns members of a set within a range of scores in reverse order.")
(make-command zrevrank "Returns the index of a member in a set ordered by descending scores.")
(make-command zscan "Iterates over members and scores of a set.")
(make-command zscore "Returns the score of a member in a set.")
(make-command zunion "Returns the union of multiple sets.")
(make-command zunionstore "Stores the union of multiple sets in a key.")
(make-command decr "Decrements the integer value of a key by one.")
(make-command decrby "Decrements a number from the integer value of a key.")
(make-command get "Returns the value of a key.")
(make-command getset "Sets the key to a new value and returns the prev value.")
(make-command incr "Increments the integer value of a key by one.")
(make-command incrby "Increments the integer value of a key by a number.")
(make-command incrbyfloat "Increments the float value of a key by a number.")
(make-command mget "Returns the values of one or more keys.")
(make-command mset "Sets the values of one or more keys.")
(make-command psetex "Sets the value and expiration time (in ms) of a key.")
(make-command set "Sets the value of a key.")
(make-command setex "Sets the value and expiration (in sec) time of a key.")
(make-command setnx "Sets the value of a key when the key doesn't exist.")
(make-command discard "Discards a transaction.")
(make-command exec "Executes all commands in a transaction.")
(make-command multi "Starts a transaction.")

(defn make-client
  "Creates a new Redka client"
  [&opt host port pass]
  (default host "127.0.0.1")
  (default port 6379)
  (default pass nil)
  (def conn (net/connect host (string port) :stream))
  (if pass (:write conn (resp/encode ["auth" pass])))
  {:send (fn [self command] (:write conn (resp/encode command)) (first (resp/decode (:read conn 1024))))
   :close (fn [self] (net/close conn))})
